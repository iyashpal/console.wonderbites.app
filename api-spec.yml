openapi: 3.0.0
info:
  title: Wonderbites App
  description: ""
  version: v1.0
security:
  - BearerAuth: []
servers:
  - description: Wonderbites API for public website and mobile applications.
    url: https://api.wonderbites.app/api

tags:
  - name: Auth
    description: Application authentication endpoints.
  - name: Categories
    description: Application authentication endpoints.
  - name: Products
    description: Application authentication endpoints.
  - name: Cuisines
    description: Application authentication endpoints.
  - name: Advertisements
    description: Application authentication endpoints.
  - name: Checkouts
    description: Application authentication endpoints.
  - name: Auth > User
    description: Application authentication endpoints.
  - name: User > Profile
    description: Application authentication endpoints.
  - name: User > Avatar
    description: Application authentication endpoints.
  - name: User > Address
    description: Application authentication endpoints.
  - name: User > Coupons
    description: Application authentication endpoints.
  - name: User > Cart
    description: Application authentication endpoints.
  - name: User > Wonderpoints
    description: Application authentication endpoints.
  - name: User > Orders
    description: Application authentication endpoints.
  - name: User > Reviews
    description: Application authentication endpoints.
  - name: User > Feedbacks
    description: Application authentication endpoints.
  - name: User > Wishlist
    description: Application authentication endpoints.
  - name: Media
    description: Application authentication endpoints.
  - name: Static > Pages
    description: Application authentication endpoints.
paths:
  /login:
    post:
      tags:
        - Auth
      security: []
      summary: Login
      description: Login users via their email|mobile and password.
      operationId: loginToApp
      requestBody:
        $ref: "#/components/requestBodies/Login"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    example: bearer
                  token:
                    type: string
                    example: MQ.TpiVCZx6BGAyA2bgCVd8RNUBFjKKl-TTZH3lM2K_ELSMQ5vBxOb5FmQ3Ly9K
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: InvalidCredentialsException
                  code:
                    type: string
                    example: E_INVALID_AUTH_PASSWORD
                  status:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: "E_INVALID_AUTH_PASSWORD: Password mis-match"
        "422":
          description: Validation
          content:
            application/json:
              schema:
                properties:
                  name:
                    type: string
                    example: ValidationException
                  code:
                    type: string
                    example: E_VALIDATION_FAILURE
                  status:
                    type: integer
                    example: 422
                  message:
                    type: string
                    example: "E_VALIDATION_FAILURE: Validation Exception"
                  errors:
                    type: object
                    properties:
                      email:
                        type: string
                        example: Email address is required to login.
                      password:
                        type: string
                        example: Enter password to login.
  /register:
    post:
      tags:
        - Auth
      security: []
      summary: Register
      description: Register users to the wonderbites cloud.
      operationId: registerToApp
      requestBody:
        $ref: "#/components/requestBodies/Register"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          description: Validation
          content:
            application/json:
              schema:
                properties:
                  name:
                    type: string
                    example: ValidationException
                    description: Name of the response
                  code:
                    type: string
                    example: E_VALIDATION_FAILURE
                    description: Alpha code of the response.
                  status:
                    type: integer
                    example: 422
                    description: Status code of response.
                  message:
                    type: string
                    example: "E_VALIDATION_FAILURE: Validation Exception"
                    description: Default response message.
                  errors:
                    type: object
                    description: Validation errors.
                    properties:
                      first_name:
                        type: string
                        example: First name is required.
                        description: First name field error.
                      last_name:
                        type: string
                        example: Last name is required.
                        description: Last name field error.
                      mobile:
                        type: string
                        example: Mobile no. is required.
                        description: Mobile no. field error.
                      email:
                        type: string
                        example: Email address is required.
                        description: Email field error.
                      password:
                        type: string
                        example: Choose a password.
                        description: Password field error.
                      password_confirmation:
                        type: string
                        example: Password didn't match.
                        description: Password match error.
  /logout:
    post:
      tags:
        - Auth
      security:
        - BearerAuth:
            - token:revoke
      summary: Logout
      description: Revoke logged in user's auth token.
      operationId: logoutFromApp
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  revoked:
                    type: boolean
                    example: true
        "401":
          $ref: "#/components/responses/Unauthorized"
  /users/auth:
    get:
      tags:
        - Auth > User
      security:
        - BearerAuth:
            - auth:view
      summary: Get
      description: Get the authenticated user data based on the authentication token.
      operationId: authenticatedUser
      parameters:
        - name: with
          in: query
          required: false
          allowEmptyValue: true
          description: "All possible array items are listed below."
          example:
            - user.addresses
          schema:
            type: array
            items:
              default: []
      responses:
        "200":
          description: When Request Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /users/avatar:
    put:
      tags:
        - User > Avatar
      security:
        - BearerAuth:
            - avatar:update
      summary: Update
      description: Update user's profile avatar.
      operationId: userAvatar
      requestBody:
        content:
          image/*:
            schema:
              type: object
              required:
                - avatar
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /users/{id}:
    put:
      tags:
        - User > Profile
      security:
        - BearerAuth:
            - auth:update
      summary: Update
      description: Update user profile data.
      operationId: updateUserByID
      parameters:
        - name: id
          in: path
          description: Unique ID of the user.
          example: 1
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - first_name
                - last_name
              properties:
                first_name:
                  type: string
                  example: John
                  description: First name of the user.
                last_name:
                  type: string
                  example: Doe
                  description: Last name of the image.
                avatar:
                  type: string
                  format: binary
                  description: Uploaded image for the user avatar
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        "401":
          $ref: "#/components/responses/Unauthorized"
    get:
      tags:
        - User > Profile
      security:
        - BearerAuth:
            - auth:view
      summary: Detail
      description: Get the authenticated user data based on the authentication token.
      operationId: showUserByID
      parameters:
        - name: id
          in: path
          description: Unique ID of the user.
          required: true
          schema:
            type: integer
            format: int64
            example: 1
        - name: with
          in: query
          required: false
          allowEmptyValue: true
          description: "All possible array items are listed below. "
          example:
            - user.addresses
          schema:
            type: array
            items:
              default: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /addresses:
    get:
      tags:
        - User > Address
      security:
        - BearerAuth:
            - address:list
      summary: List
      operationId: getAddressesList
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Addresses"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      tags:
        - User > Address
      security:
        - BearerAuth:
            - address:create
      summary: Create
      operationId: storeAddressesList
      requestBody:
        $ref: "#/components/requestBodies/Address"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Addresses"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /addresses/{id}:
    get:
      tags:
        - User > Address
      security:
        - BearerAuth:
            - address:view
      summary: Show
      operationId: getAddressesById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Addresses"
        "401":
          $ref: "#/components/responses/Unauthorized"
    put:
      tags:
        - User > Address
      security:
        - BearerAuth:
            - address:edit
            - address:update
      summary: Update
      operationId: putAddressesById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/Address"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Addresses"

        "401":
          $ref: "#/components/responses/Unauthorized"
    patch:
      tags:
        - User > Address
      security:
        - BearerAuth:
            - address:edit
            - address:update
      summary: Update
      operationId: patchAddressesById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/Address"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Addresses"
        "401":
          $ref: "#/components/responses/Unauthorized"
    delete:
      tags:
        - User > Address
      security:
        - BearerAuth:
            - address:delete
            - address:destroy
      summary: Delete
      description: Request to delete the user address.
      operationId: deleteAddressesById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            description: Unique ID of the address.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                example:
                  deleted: true
        "401":
          $ref: "#/components/responses/Unauthorized"
  /categories:
    get:
      tags:
        - Categories
      security: []
      summary: List
      description: By passing in the appropriate options, you can search for available categories in the system.
      parameters:
        - name: type
          in: query
          description: The possible categories types are (`all`,`product`, `ingredient`, `cuisine`)
          style: form
          required: false
          explode: true
          schema:
            default: all
            type: string
            example: product
        - name: search
          in: query
          description: Search categories by keywords.
          style: form
          required: false
          explode: true
          schema:
            type: string
            default: null
        - name: searchable[]
          in: query
          description: Specify the searchable areas of the `search` query parameter.
          required: false
          example:
            - categories
            - products
          schema:
            type: array
            items:
              default: []
        - name: with[]
          in: query
          description: All possible array items are listed below.
          required: false
          example:
            - category.products
            - category.cuisines
            - category.ingredients
            - category.products.media
            - category.products.reviews
            - category.products.wishlist
            - category.products.ingredients
          schema:
            type: array
            format: string
            items:
              default: []
        - name: withAvg[]
          in: query
          description: Get the average calculation of some fields based on attributes passed.
          example:
            - category.products.reviews
          schema:
            type: array
            items:
              default: []
      responses:
        "200":
          description: Search results matching criteria
          content:
            application/json:
              schema:
                type: array
                description: ""
                items:
                  $ref: "#/components/schemas/Categories"
  /categories/{id}:
    get:
      tags:
        - Categories
      security: []
      summary: View
      description: By passing in the appropriate options, you can search for available categories in the system.
      operationId: showCategory
      parameters:
        - name: id
          in: path
          required: true
          description: Unique ID of the category.
          schema:
            type: integer
            default: null
            example: 1
        - name: search
          in: query
          description: The search keyword could be anything.
          style: form
          required: false
          explode: true
          schema:
            type: string
            default: null
        - name: searchable[]
          in: query
          description: Specify the searchable areas for the `search` query parameter.
          required: false
          example:
            - products
          schema:
            type: array
            items:
              default: []
        - name: with[]
          in: query
          description: All possible array items are described below.
          required: false
          example:
            - products
            - products.media
            - products.ingredients
            - products.reviews
            - products.wishlist
            - ingredients
            - cuisines
          schema:
            type: array
            format: string
            items:
              default: []
        - name: withAvg[]
          in: query
          description: Get the average calculation of some fields based on attributes passed.
          example:
            - category.products.reviews
          schema:
            type: array
            items:
              default: []
      responses:
        "200":
          description: Search results matching criteria
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Categories"
  /products:
    get:
      tags:
        - Products
      security: []
      summary: List
      description: By passing in the appropriate options, you can search for available products in the system.
      operationId: searchProducts
      parameters:
        - name: search
          in: query
          description: Search products by keywords.
          style: form
          required: false
          explode: true
          schema:
            type: string
            default: null
        - name: searchable[]
          in: query
          description: Specify the searchable areas of the `search` query parameter.
          style: form
          required: false
          example:
            - categories
            - products
          schema:
            type: array
            default: []
            items:
              type: string

        - name: with[]
          in: query
          description: Pass an optional attributes of product
          required: false
          example:
            - products.wishlist
            - products.media
            - products.ingredients
            - products.reviews
            - products.wishlist
            - products.ingredients
          schema:
            type: array
            default: []
            items:
              type: string
        - name: withAvg[]
          in: query
          description: Get the average calculation of some fields based on attributes passed.
          style: form
          example:
            - category.products.reviews
          schema:
            type: array
            default: []
            items:
              type: string

        - name: inCategories[]
          in: query
          description: Search products within selected categories.
          example:
            - 1
            - 2
          schema:
            type: array
            default: []
            items:
              type: string
        - name: filters[]
          in: query
          description: Filter products based on some filters
          example:
            - top-rated
            - todays-pick
            - popular
          schema:
            type: array
            default: []
            items:
              type: string

        - name: withCount[]
          in: query
          description: Attach the relation's counts.
          example:
            - products.reviews
          schema:
            type: array
            default: []
            items:
              type: string

      responses:
        "200":
          description: Search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Products"
  /products/{id}:
    get:
      tags:
        - Products
      security: []
      summary: Show
      description: By passing in the appropriate options, you can search for available products in the system.
      operationId: showProducts
      parameters:
        - name: id
          in: path
          description: Get product by ID.
          required: true
          schema:
            type: number
            default: null
            example: 1

        - name: with[]
          in: query
          description: Pass an optional attributes of product
          required: false
          example:
            - product.wishlist
            - product.media
            - product.ingredients
            - product.reviews
            - product.wishlist
            - product.ingredients
          schema:
            type: array
            default: []
            items:
              type: string
        - name: withAvg[]
          in: query
          description: Get the average calculation of some fields based on attributes passed.
          style: form
          example:
            - category.products.reviews
          schema:
            type: array
            default: []
            items:
              type: string

        - name: inCategories[]
          in: query
          description: Search products within selected categories.
          example:
            - 1
            - 2
          schema:
            type: array
            default: []
            items:
              type: string
        - name: filters[]
          in: query
          description: Filter products based on some filters
          example:
            - top-rated
            - todays-pick
            - popular
          schema:
            type: array
            default: []
            items:
              type: string
        - name: withCount[]
          in: query
          description: Attach the relation's counts.
          example:
            - products.reviews
          schema:
            type: array
            default: []
            items:
              type: string

      responses:
        "200":
          description: Search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Products"
        404:
          $ref: '#/components/responses/NotFound'

  /cart:
    put:
      tags:
        - User > Cart
      summary: Update
      parameters:
        - name: with[]
          in: query
          schema:
            type: array
          example:
            - cart.products
            - cart.ingredients
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                action: ADD
                products:
                  "1":
                    qty: 1
                ingredients:
                  "1":
                    product_id: 1
                    qty: 5
                  "2":
                    product_id: 1
                    qty: 2
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
    patch:
      tags:
        - User > Cart
      summary: Update
      parameters:
        - name: with[]
          in: query
          schema:
            type: array
          example:
            - cart.products
            - cart.ingredients
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  default: null
                  description: Specify the cart action for the request.
                  example:
                    - ADD
                    - REMOVE
                products:
                  type: object
              example:
                action: ADD
                products:
                  "1":
                    qty: 1
                ingredients:
                  "1":
                    product_id: 1
                    qty: 5
                  "2":
                    product_id: 1
                    qty: 2
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
    get:
      tags:
        - User > Cart
      summary: Detail
      parameters:
        - name: with[]
          in: query
          schema:
            type: array
          example:
            - cart.products
            - cart.ingredients
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
  /wonderpoints:
    get:
      tags:
        - User > Wonderpoints
      summary: Detail
      parameters:
        - name: type
          in: query
          example:
            - all
            - earned
            - redeemed
          schema:
            type: string
            default: all
        - name: page
          in: query
          example:
            - 2
          schema:
            type: string
            default: 1
        - name: limit
          in: query
          example:
            - 15
          schema:
            type: string
            default: 10

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Wonderpoints'
  /wonderpoints/avail:
    get:
      tags:
        - User > Wonderpoints
      summary: Balance
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  wonderpoints:
                    type: number
                    example: 100
                    default: 0
  /wishlists:
    get:
      tags:
        - User > Wishlist
      summary: Detail
      parameters:
        - name: with[]
          in: query
          example:
            - wishlist.products
            - wishlist.products.media
            - wishlist.products.ingredients
            - wishlist.products.reviews
            - wishlist.ingredients
          schema:
            type: array
            items:
              default: []
        - name: withAvg[]
          in: query
          example:
            - wishlist.products.reviews
          schema:
            type: array
            items:
              default: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wishlists'
    put:
      tags:
        - User > Wishlist
      summary: Update
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  default: null
                  description: Specify the cart action for the request.
                  example:
                    - ADD
                    - REMOVE
                products:
                  type: object
              example:
                action: ADD
                products:
                  "1":
                    qty: 1
                ingredients:
                  "1":
                    product_id: 1
                    qty: 5
                  "2":
                    product_id: 1
                    qty: 2
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wishlists'

  /wishlists/clean:
    post:
      tags:
        - User > Wishlist
      summary: Clean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wishlists'
  /feedbacks:
    get:
      tags:
        - User > Feedbacks
      summary: List
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feedbacks'
    post:
      tags:
        - User > Feedbacks
      summary: Store
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                experience:
                  type: string
                  example: User experience
                body:
                  type: string
                  example: User feedback body.
                source:
                  type: string
                  example: Feedback source
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedbacks'
  /feedbacks/{id}:
    get:
      tags:
        - User > Feedbacks
      summary: Show
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
            example: 1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedbacks'
    put:
      tags:
        - User > Feedbacks
      summary: Update
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
            default: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                experience:
                  type: string
                  example: User experience
                body:
                  type: string
                  example: User feedback body.
                source:
                  type: string
                  example: Feedback source
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedbacks'
    patch:
      tags:
        - User > Feedbacks
      summary: Update
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
            default: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                experience:
                  type: string
                  example: User experience
                body:
                  type: string
                  example: User feedback body.
                source:
                  type: string
                  example: Feedback source
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedbacks'

    delete:
      tags:
        - User > Feedbacks
      summary: Delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
            default: 1
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: boolean
                    example: true
  /coupons/apply:
    post:
      tags:
        - User > Coupons
      summary: Redeem
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                coupon:
                  type: string
                  default: null
                  example: FRIDAY
                cart:
                  type: integer
                  default: null
                  example: "5"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                  code:
                    type: string
                    example: FRIDAY
                  discount_type:
                    type: string
                    example: price
                  discount_value:
                    type: string
                    example: 50
        422:
          description: Validation
          content:
            application/json:
              schema:
                type: object


  /coupons/remove:
    post:
      tags:
        - User > Coupons
      summary: Redeem
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                cart:
                  type: integer
                  example: "5"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        422:
          description: Validation
          content:
            application/json:
              schema:
                type: object
  /orders:
    get:
      tags:
        - User > Orders
      summary: List
      parameters:
        - name: with[]
          in: query
          schema:
            type: string
          example: order.products
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Orders'
  /orders/{id}:
    get:
      tags:
        - User > Orders
      summary: Detail
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: 1
        - name: with[]
          in: query
          schema:
            type: string
          example: order.products
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders'
  /orders/{id}/cancel:
    put:
      tags:
        - User > Orders
      summary: Cancel
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: 1
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders'
  /reviews:
    get:
      tags:
        - User > Reviews
      summary: List
      parameters:
        - name: with[]
          in: query
          example:
            - review.user
            - review.product
            - review.product.media
          schema:
            type: array
            items:
              default: []
        - name: page
          in: query
          example: 2
          schema:
            type: number
            default: 1
        - name: limit
          in: query
          example: 15
          schema:
            type: number
            default: 10
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref : '#/components/schemas/Reviews'
    post:
      tags:
        - User > Reviews
      summary: Store
      requestBody:
        $ref: '#/components/requestBodies/CreateReview'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref : '#/components/schemas/Reviews'
  /reviews/{id}:
    get:
      tags:
        - User > Reviews
      summary: Show
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: 1
        - name: with[]
          in: query
          schema:
            type: array
            items:
              default: []
          example:
            - review.user
            - review.product
            - review.product.media
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref : '#/components/schemas/Reviews'
    put:
      tags:
        - User > Reviews
      summary: Update
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: number
                  example: 5
                title:
                  type: string
                  example: This is the review title.
                body:
                  type: string
                  example: This is the review body.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: 1
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref : '#/components/schemas/Reviews'
  /advertisements:
    get:
      tags:
        - Advertisements
      summary: List
      parameters:
        - name: location
          in: query
          required: true
          example: home.banner
          schema:
            type: string
            default: null
        - name: with[]
          in: query
          example:
            - advertisements.user
          schema:
            type: array
            items:
              type: string
              default: []
        - name: filters[]
          in: query
          example:
            - active
          schema:
            type: array
            items:
              type: string
              default: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Advertisements'
  /advertisements/{id}:
    get:
      tags:
        - Advertisements
      summary: Show
      parameters:
        - name: id
          in: path
          required: true
          example: 1
          schema:
            type: number
            default: null
        - name: with[]
          in: query
          example:
            - advertisement.user
          schema:
            type: array
            items:
              type: string
              default: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Advertisements'
        404:
          $ref: '#/components/responses/NotFound'
  /cuisines:
    get:
      tags:
        - Cuisines
      summary: List
      parameters:
        - name: with[]
          in: query
          schema:
            type: array
            default: []
            items:
              type: string
          example:
            - cuisines.categories
        - name: limit
          in: query
          example:
            - 10
            - 11
          schema:
            default: 10
            type: string
        - name: page
          in: query
          example:
            - 1
          schema:
            default: 1
            type: number

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cuisines'
  /cuisines/{id}:
    get:
      tags:
        - Cuisines
      summary: Show
      parameters:
        - name: id
          in: path
          required: true
          example: 1
          schema:
            type: number
            default: null

        - name: with[]
          in: query
          schema:
            type: array
            default: []
            items:
              type: string
          example:
            - cuisines.categories

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cuisines'

  /checkouts:
    post:
      tags:
        - Checkouts
      summary: Process
      requestBody:
        $ref: '#/components/requestBodies/Checkout'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders'
  /static/about:
    get:
      tags:
        - Static > Pages
      summary: About
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /static/privacy-policy:
    get:
      tags:
        - Static > Pages
      summary: Privacy Policy
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /static/content-policy:
    get:
      tags:
        - Static > Pages
      summary: Content Policy
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /static/terms-of-services:
    get:
      tags:
        - Static > Pages
      summary: Terms Of Services
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  requestBodies:
    Login:
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                example: john.doe@example.com
                description: Registered email of the user.
              password:
                type: string
                example: secret
                description: Password used while account registration.
    Register:
      description: Form fields needed for the request.
      content:
        application/json:
          schema:
            type: object
            required:
              - first_name
              - last_name
              - mobile
              - email
              - password
              - password_confirmation
            properties:
              first_name:
                type: string
                example: John
                description: First name of the user.
              last_name:
                type: string
                example: Doe
                description: Last name of the user.
              mobile:
                type: string
                example: +xx xxxx-xxxx
                description: Mobile number of the user. User can also login with this number.
              email:
                type: string
                example: john.doe@example.com
                description: Login email of the user.
              password:
                type: string
                example: secret
                description: Login password.
              password_confirmation:
                type: string
                example: secret
                description: Confirmation of the entered password.
    Address:
      description: Form fields needed for the request.
      content:
        application/json:
          schema:
            type: object
            required:
              - first_name
              - last_name
              - street
              - city
              - phone
              - type
            properties:
              first_name:
                type: string
                example: John
                description: First name of the user.
              last_name:
                type: string
                example: Doe
                description: Last name of the user.
              street:
                type: string
                example: XYZ, ABC
                description: Street of the user address.
              city:
                type: string
                example: US
                description: City name of the user address
              phone:
                type: string
                example: +xx xxxx-xxxx
                description: Contact no. of the user.
              type:
                type: string
                example: home
                description: Address type.
              location:
                type: object
                description: Location **LAT** & **LNG** coordinates.
                properties:
                  lat:
                    type: string
                    example: 3257896
                    description: Latitude of address.
                  lng:
                    type: string
                    example: -85.3257896
                    description: Longitude of address.
              is_default:
                type: boolean
                example: true
                description: Set this address as default
    Checkout:
      content:
        application/json:
          schema:
            type: object
            required:
              - cart
              - address
              - options
            properties:
              cart:
                type: number
                example: 1
                description: Cart ID to process the order.
              address:
                type: object
                properties:
                  first_name:
                    type: string
                    example: John
                  last_name:
                    type: string
                    example: Doe
                  street:
                    type: string
                    example: XYZ
                  city:
                    type: string
                    example: ABC
                  phone:
                    type: string
                    example: (123) 456 789
                  email:
                    type: string
                    example: johndoe@example.com
                  location:
                    type: object
                    properties:
                      lat:
                        type: string
                        example: 85.4568
                      lng:
                        type: string
                        example: -03.6546
              options:
                type: object
                properties:
                  payment:
                    type: object
                    properties:
                      mode:
                        type: string
                        example: COD
              note:
                type: string
                example:
    CreateReview:
      content:
        application/json:
          schema:
            type: object
            required:
              - reviewable
              - reviewable_id
              - title
              - body
              - rating
            properties:
              reviewable:
                type: string
                example: Product
              reviewable_id:
                type: number
                example: 1
              rating:
                type: number
                example: 5
              title:
                type: string
                example: Review title
              body:
                type: string
                example: This is the body of review.
  responses:
    Unauthorized:
      description: Authorization
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: AuthorizationException
                description: Name of the response.
              code:
                type: string
                example: E_UNAUTHORIZED_ACCESS
                description: Alpha code of the response.
              status:
                type: number
                example: 401
                description: Status code of response.
              message:
                type: string
                example: Unauthorized access
                description: Default response message.
    NotFound:
      description: Record not found.
      content:
        application/json:
          schema:
            type: object
            example: ""
  schemas:
    Categories:
      required:
        - type
        - name
      type: object
      properties:
        id:
          type: integer
          example: 1
        type:
          type: string
          example: Product
          description: Product | Ingredient | Cuisine etc.
        parent:
          type: integer
          description: Reference to parent category.
          example: 0
        name:
          type: string
          description: Name of the category.
          example: Base
        description:
          type: string
          description: Description of the category.
          example: lorem impsum....
        status:
          type: number
          description: Status of the category.
          example: "1"
        created_at:
          type: string
          description: Date when category added.
          example: "2022-10-20 14:21:28.92+05:30"
        updated_at:
          type: string
          description: Date when category last updated.
          example: "2022-10-20 14:21:28.92+05:30"
        products:
          type: array
          items:
            $ref: "#/components/schemas/Products"
    Users:
      required:
        - email
        - first_name
        - id
        - last_name
        - mobile
        - password
      type: object
      properties:
        id:
          type: string
          example: "1"
          description: Unique ID of the record.
        first_name:
          type: string
          example: John
          description: First name of the user.
        last_name:
          type: string
          example: Doe
          description: Last name of the user.
        email:
          type: string
          example: john.doe@example.com
          description: Login email of the user.
        password:
          type: string
          example: password
          description: Hashed password of the user.
        avatar:
          type: object
          example:
            name: avatars/clc07y9mf00014wp969gabvh6.png
            extname: png
            size: "127890"
            mimeType: image/png
          description: Cloud storage data of image.
        avatar_url:
          type: string
          description: Pre-computed url of user avatar.
          example: https://storage.googleapis.com/next-wonderbites-app/avatars/clc07y9mf00014wp969gabvh6.png
        address_id:
          type: number
          example: 1
          description: Default delivery address unique ID.
        remember_me_token:
          type: string
          example: null
          description: Remember me token.
        mobile:
          type: string
          example: +xx xxxxx xxxxx
          description: Mobile number of the user. User can also login with this number.
        status:
          type: integer
          example: 1
          description: User status (for internal use only.)
        language:
          type: string
          example: EN
          description: Default selected language of the user.
        created_at:
          type: string
          example: "2022-10-20 14:21:28.92+05:30"
          description: Date when user registered to app/website.
        updated_at:
          type: string
          example: "2022-10-20 14:21:28.92+05:30"
          description: Date when user last updated their data.
        deleted_at:
          type: string
          example: null
          description: Date when user deleted their account.
    Addresses:
      required:
        - city
        - first_name
        - last_name
        - phone
        - street
        - type
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: Unique ID of the record.
        user_id:
          type: integer
          example: 1
          description: ID of the user who owns the address.
        first_name:
          type: string
          example: John
          description: First name of the recipient.
        last_name:
          type: string
          example: Doe
          description: Last name of the recipient
        street:
          type: string
          example: 845 Meadows Rd
          description: Street name.
        city:
          type: string
          example: Aspen
          description: City name
        phone:
          type: string
          example: (970) 925-4240
          description: Contact no. of recipient.
        location:
          type: object
          example:
            lat: 39.202683
            lng: -106.831857
        created_at:
          type: string
          example: "2022-12-27 07:37:43.815+00"
          description: Date when address added.
        updated_at:
          type: string
          example: "2022-12-29 11:21:28.195+00"
          description: Date when address last updated.
        deleted_at:
          type: string
          example: null
          description: Date when address deleted.
    Products:
      required:
        - city
        - first_name
        - last_name
        - phone
        - street
        - type
      type: object
      properties:
        id:
          type: integer
          description: Unique ID of the product.
          example: 1
        name:
          type: string
          description: Name of the product.
          example: Salmon Teriyaki
        description:
          type: string
          description: Product description.
          example: The beauty of this Salad Bowl is that it is completely customizable. The baked salmon with homemade teriyaki sauce is the star of the show but you can choose how to showcase it. Swap the spinach/carrots/edamame for any of your favorite veggies
        sku:
          type: string
          description: Product SKU
          example: "482"
        calories:
          type: string
          description: Calories of the product.
          example: "500"
        price:
          type: string
          description: Product sale price.
          example: "1000"
        thumbnail:
          type: object
          example:
            name: products/clc07y9mf00014wp969gabvh6.png
            extname: png
            size: "127890"
            mimeType: image/png
          description: Cloud storage data of image.
        thumbnail_url:
          type: string
          description: Pre-computed url of product thumbnail.
          example: https://storage.googleapis.com/next-wonderbites-app/products/clc07y9mf00014wp969gabvh6.png
        status:
          type: integer
          description: Product status.
          example: "1"
        published_at:
          type: string
          example: "2022-12-27 07:37:43.815+00"
          description: Date when product published publicly.
        created_at:
          type: string
          example: "2022-12-27 07:37:43.815+00"
          description: Date when product added.
        updated_at:
          type: string
          example: "2022-12-29 11:21:28.195+00"
          description: Date when product last updated.
        deleted_at:
          type: string
          example: null
          description: Date when product deleted.
        user:
          $ref: "#/components/schemas/Users"
        media:
          type: array
          items:
            $ref: "#/components/schemas/Media"
    Media:
      properties:
        id:
          type: string
          description: Unique ID of the record.
          example: "1"
        user_id:
          type: number
          description: User ID of the user who created the media.
          example: 1
        title:
          type: number
          description: User ID of the user who created the media.
          example: 1
        caption:
          type: number
          description: User ID of the user who created the media.
          example: 1
        attachment:
          type: object
          example:
            name: media/clc07y9mf00014wp969gabvh6.png
            extname: png
            size: "127890"
            mimeType: image/png
          description: Cloud storage data of attachment.
        attachment_url:
          type: string
          description: Pre-computed url of media attachment.
          example: https://storage.googleapis.com/next-wonderbites-app/media/clc07y9mf00014wp969gabvh6.png
        created_at:
          type: string
          example: "2022-12-27 07:37:43.815+00"
          description: Date when product added.
        updated_at:
          type: string
          example: "2022-12-29 11:21:28.195+00"
          description: Date when product last updated.
    Cart:
      properties:
        id:
          type: string
          default: 1
          description: Unique ID of cart.
        user_id:
          type: number
          default: 1
          description: User id belongs to cart.
        coupon_id:
          type: number
          default: 1
          description: Coupon id belongs to cart.
        ip_address:
          type: string
          default: 127.0.0.1
          description: User's device IP address.
        status:
          type: number
          default: 1
          description: Cart status
        created_at:
          type: string
          description: Date when cart created.
        updated_at:
          type: string
          description: Date when cart last updated.
    Cuisines:
      properties:
        id:
          type: string
          default: 1
          description: Unique ID of cart.
        name:
          type: string
          default: 1
          description: User id belongs to cart.
        description:
          type: string
          default: 1
          description: Coupon id belongs to cart.
        thumbnail:
          type: object
          example:
            name: media/clc07y9mf00014wp969gabvh6.png
            extname: png
            size: "127890"
            mimeType: image/png
          description: Cloud storage data of attachment.
        thumbnail_url:
          type: string
          description: Pre-computed url of media attachment.
          example: https://storage.googleapis.com/next-wonderbites-app/media/clc07y9mf00014wp969gabvh6.png
        status:
          type: number
          default: 1
          description: Cart status
        created_at:
          type: string
          description: Date when cart created.
        updated_at:
          type: string
          description: Date when cart last updated.
    Advertisements:
      properties:
        id:
          type: string
          default: 1
          description: Unique ID of advertisement.
        user_id:
          type: number
          default: 1
          description: User id belongs to advertisement.
        title:
          type: string
          default: 1
          description: Advertisement title.
        description:
          type: string
          default: 1
          description: Coupon id belongs to cart.
        attachment:
          type: object
          example:
            name: media/clc07y9mf00014wp969gabvh6.png
            extname: png
            size: "127890"
            mimeType: image/png
          description: Cloud storage data of attachment.

        attachment_url:
          type: string
          description: Pre-computed url of media attachment.
          example: https://storage.googleapis.com/next-wonderbites-app/advertisements/clc07y9mf00014wp969gabvh6.png
        options:
          type: object
          default: { location: 'home.banner'}
          description: advertisement options.
          properties:
            location:
              type: string
              default: null
              example: 'home.banner'
        status:
          type: number
          default: 1
          description: Cart status
        created_at:
          type: string
          description: Date when cart created.
        updated_at:
          type: string
          description: Date when cart last updated.
        user:
          $ref: '#/components/schemas/Users'
    Wonderpoints:
      properties:
        id:
          type: string
          default: 1
          description: Unique ID of the record.

        user_id:
          type: number
          default: 1
          description: User id belongs to wonderpoint.

        action:
          type: string
          example: "earned"
          description: Wonderpoints nature earned OR redeemed.

        event:
          type: string
          example: "Daily login"
          description: Event name.

        points:
          type: integer
          example: 24
          description: Earned/Redeemed points.

        extras:
          type: object
          description: extra options of wonderpoints.
          example: {}

        created_at:
          type: string
          description: Date when wonderpoints created.
        updated_at:
          type: string
          description: Date when wonderpoints last updated.
    Orders:
      properties:
        id:
          type: string
          default: 1
          description: Unique ID of the record.

        user_id:
          type: number
          default: 1
          description: User id belongs to wonderpoint.

        coupon_id:
          type: number
          example: 1
          description: Redeemed coupon ID.

        ip_address:
          type: string
          example: "127.0.0.1"
          description: User IP address.

        deliver_to:
          type: object
          example:
            first_name: 'John'
            last_name: 'Doe'
            street: 'XYZ'
            city: 'ABC'
            phone: '(123) 4568 456'
            email: 'johndoe@example.com'
            location:
              lat: 56.5647
              lng: -75.655
          description: customer delivery address.

        options:
          type: object
          description: extra options for the record.
          example: {}

        note:
          type: object
          description: record notes...
          example: This is extra note.

        status:
          type: number
          description: record's status.
          example: 1

        created_at:
          type: string
          example: "2022-10-20 14:21:28.92+05:30"
          description: Date when record created.
        updated_at:
          type: string
          example: "2022-10-20 14:21:28.92+05:30"
          description: Date when record last updated.
        deleted_at:
          type: string
          example: "2022-10-20 14:21:28.92+05:30"
          description: Date when record last deleted.

    Reviews:
      properties:
        id:
          type: string
          default: 1
          description: Unique ID of the record.

        user_id:
          type: number
          default: 1
          description: User id belongs to wonderpoint.

        reviewable:
          type: string
          example: Product
          description: Reviewable model name.

        reviewable_id:
          type: number
          example: 1
          description: Related model id.

        rating:
          type: number
          example: 5
          description: customer delivery address.

        title:
          type: string
          description: extra options for the record.
          example: Review title

        body:
          type: object
          description: record notes...
          example: Review body.

        status:
          type: number
          description: record's status.
          example: 1

        created_at:
          type: string
          example: "2022-10-20 14:21:28.92+05:30"
          description: Date when record created.
        updated_at:
          type: string
          example: "2022-10-20 14:21:28.92+05:30"
          description: Date when record last updated.
        deleted_at:
          type: string
          example:
          description: Date when record last deleted.
    Feedbacks:
      properties:
        id:
          type: string
          default: 1
          description: Unique ID of the record.

        user_id:
          type: number
          default: 1
          description: User id belongs to the record.

        experience:
          type: string
          example: 10
          description: User experience

        body:
          type: object
          description: record body...
          example: Feedback body.

        source:
          type: string
          description: record's source.
          example: Feedback source

        created_at:
          type: string
          example: "2022-10-20 14:21:28.92+05:30"
          description: Date when record created.
        updated_at:
          type: string
          example: "2022-10-20 14:21:28.92+05:30"
          description: Date when record last updated.

    Wishlists:
      properties:
        id:
          type: string
          default: 1
          description: Unique ID of the record.

        user_id:
          type: number
          default: 1
          description: User id belongs to the record.

        ip_address:
          type: string
          example: 127.0.0.1
          description: User device IP

        created_at:
          type: string
          example: "2022-10-20 14:21:28.92+05:30"
          description: Date when record created.
        updated_at:
          type: string
          example: "2022-10-20 14:21:28.92+05:30"
          description: Date when record last updated.
