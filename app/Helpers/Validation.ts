type ErrorField = { [key: string]: string[] }
type ResolvedErrorFields = { [key: string]: string }
type JsonErrorField = { errors: { field: string, message: string, rule: string }[] }

/**
 * Get the resolved validation errors.
 *
 * @param validationErrors Form validation errors.
 * @returns {Object}
 */
export function resolveValidationErrors (validationErrors: Object) {
  const errors = {}

  for (let i in validationErrors) {
    if (typeof validationErrors[i] === 'object') {
      errors[i] = Object.values(validationErrors[i])[0]
    }

    if (typeof validationErrors[i] === 'string') {
      errors[i] = validationErrors[i]
    }
  }

  return errors
}

export class ValidationErrors {
  public errors: ResolvedErrorFields

  constructor (messages: any) {
    const callable = messages?.errors ? 'resolveJsonAcceptedErrors' : 'resolveErrors'

    this.errors = this[callable](messages)
  }

  public resolve (): ResolvedErrorFields {
    return this.errors
  }

  /**
   * Resolve the exception validation error generated by the JSON Accepted request.
   *
   * @param param0 ErrorField[]
   * @returns ResolvedErrorFields
   */
  protected resolveJsonAcceptedErrors ({errors}: JsonErrorField): ResolvedErrorFields {
    let resolvedErrors: ResolvedErrorFields = {}
    for (let error of errors) {
      resolvedErrors = {...resolvedErrors, ...{[error.field]: error.message}}
    }

    return resolvedErrors
  }

  /**
   * Resolve the exception validation errors.
   *
   * @returns ResolvedErrorFields
   */
  protected resolveErrors (errors: ErrorField): ResolvedErrorFields {
    let resolvedErrors: ResolvedErrorFields = {}
    for (let field in errors) {
      resolvedErrors = {...resolvedErrors, ...{[field]: errors[field][0]}}
    }

    return resolvedErrors
  }
}
